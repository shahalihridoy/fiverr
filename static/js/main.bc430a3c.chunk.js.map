{"version":3,"sources":["app/components/Slider.jsx","app/views/Demo.jsx","styles/Theme.jsx","App.js","serviceWorker.js","index.js"],"names":["StyledSlider","withStyles","thumb","height","width","backgroundColor","border","track","borderRadius","Slider","CustomSlider","_React$useState","React","useState","_React$useState2","Object","slicedToArray","value","setValue","handleChange","event","react_default","a","createElement","className","onClick","style","marginLeft","marginRight","paddingBottom","fontSize","component","min","max","step","onChange","Demo","Card","elevation","FormControlLabel","control","Checkbox","color","label","components_Slider","TextField","variant","multiline","rows","placeholder","Divider","Button","size","Theme","createMuiTheme","typography","palette","primary","main","contrastText","secondary","status","danger","red","App","ThemeProvider","theme","views_Demo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc430a3c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Slider from \"@material-ui/lab/Slider\";\r\nimport { withStyles } from \"@material-ui/core\";\r\nimport { fade } from \"@material-ui/core/styles\";\r\n\r\nconst StyledSlider = withStyles({\r\n  thumb: {\r\n    height: 16,\r\n    width: 16,\r\n    backgroundColor: \"#fff\",\r\n    border: \"2px solid\"\r\n  },\r\n  track: {\r\n    height: 2,\r\n    border: \"2px solid\",\r\n    borderRadius: 4\r\n  }\r\n})(Slider);\r\n\r\nconst CustomSlider = () => {\r\n  let [value, setValue] = React.useState(2);\r\n\r\n  const handleChange = (event, value) => {\r\n    setValue(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"relative\">\r\n      <div className=\"flex flex-middle flex-space-between\">\r\n        <samll className=\"pointer\" onClick={() => handleChange(null, 0)}>\r\n          Mellow\r\n        </samll>\r\n        <samll\r\n          className=\"pointer\"\r\n          onClick={() => handleChange(null, 1)}\r\n          style={{ marginLeft: \"-18px\" }}\r\n        >\r\n          Low\r\n        </samll>\r\n        <samll className=\"pointer\" onClick={() => handleChange(null, 2)}>\r\n          Medium\r\n        </samll>\r\n        <samll\r\n          className=\"pointer\"\r\n          onClick={() => handleChange(null, 3)}\r\n          style={{ marginRight: \"-14px\" }}\r\n        >\r\n          High\r\n        </samll>\r\n        <samll className=\"pointer\" onClick={() => handleChange(null, 4)}>\r\n          Critical\r\n        </samll>\r\n      </div>\r\n      <div className=\"flex flex-space-between\">\r\n        <small style={{ paddingBottom: \"8px\", fontSize: \"8px\" }}>|</small>\r\n        <small style={{ paddingBottom: \"8px\", fontSize: \"8px\" }}>|</small>\r\n        <small style={{ paddingBottom: \"8px\", fontSize: \"8px\" }}>|</small>\r\n        <small style={{ paddingBottom: \"8px\", fontSize: \"8px\" }}>|</small>\r\n        <small style={{ paddingBottom: \"8px\", fontSize: \"8px\" }}>|</small>\r\n      </div>\r\n      <StyledSlider\r\n        component=\"div\"\r\n        value={value}\r\n        min={0}\r\n        max={4}\r\n        step={1}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CustomSlider;\r\n","import React from \"react\";\r\nimport {\r\n  Card,\r\n  FormControlLabel,\r\n  Checkbox,\r\n  TextField,\r\n  Divider,\r\n  Button\r\n} from \"@material-ui/core\";\r\nimport CustomSlider from \"../components/Slider\";\r\n\r\nconst Demo = () => {\r\n  return (\r\n    <div>\r\n      <Card className=\"demo mt-24\" elevation={3}>\r\n        <div className=\"demo__header\">\r\n          <p className=\"m-0 text-primary\">NEW CASE</p>\r\n          <h3 className=\"m-0\">Status and Notifications</h3>\r\n        </div>\r\n\r\n        <div className=\"mt-24\">\r\n          <p className=\"m-0 pb-\">Notify</p>\r\n          <div className=\"flex flex-middle flex-space-between\">\r\n            <FormControlLabel\r\n              control={<Checkbox color=\"primary\" />}\r\n              label=\"Checkbox\"\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox color=\"primary\" />}\r\n              label=\"Checkbox\"\r\n            />\r\n            <FormControlLabel\r\n              control={<Checkbox color=\"primary\" />}\r\n              label=\"Checkbox\"\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-24\">\r\n          <p className=\"m-0 pb-8\">Urgency</p>\r\n          <CustomSlider />\r\n        </div>\r\n        <div className=\"mt-24 pt-16\">\r\n          <p className=\"m-0 pb-8\">Other details</p>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            multiline\r\n            rows={3}\r\n            className=\"w-100\"\r\n            placeholder=\"Incurred charges were not discussed yet\"\r\n          />\r\n        </div>\r\n        <div className=\"mt-16\">\r\n          <Divider />\r\n        </div>\r\n        <div className=\"mt-16 flex flex-end\">\r\n          <Button\r\n            className=\"capitalize\"\r\n            variant=\"contained\"\r\n            size=\"large\"\r\n            color=\"primary\"\r\n          >\r\n            submit case\r\n          </Button>\r\n        </div>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Demo;\r\n","import { createMuiTheme } from \"@material-ui/core\";\r\nimport { red } from \"@material-ui/core/colors\";\r\n\r\nexport const Theme = createMuiTheme({\r\n  typography: {\r\n    fontSize: 12\r\n  },\r\n  palette: {\r\n    primary: {\r\n      main: \"#443699\",\r\n      contrastText: \"#ffffff\"\r\n    },\r\n    secondary: {\r\n      main: \"rgb(29, 191, 115)\",\r\n      contrastText: \"#ffffff\"\r\n    }\r\n  },\r\n  status: {\r\n    danger: red[500]\r\n  }\r\n});\r\n","import React from \"react\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport \"./app.scss\";\nimport Demo from \"./app/views/Demo\";\nimport { Theme } from \"./styles/Theme\";\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={Theme}>\n      <Demo />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}